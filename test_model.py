"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—ñ–≤ —Ç–∞ –º–æ–¥–µ–ª—ñ
"""


def test_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤"""
    try:
        print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤...")

        import numpy as np
        print(f"‚úÖ NumPy {np.__version__}")

        import pandas as pd
        print(f"‚úÖ Pandas {pd.__version__}")

        import lightgbm as lgb
        print(f"‚úÖ LightGBM {lgb.__version__}")

        import sklearn
        print(f"‚úÖ Scikit-learn {sklearn.__version__}")

        import joblib
        print(f"‚úÖ Joblib {joblib.__version__}")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {str(e)}")
        return False


def test_model_loading():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
    try:
        print("\nüì• –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")

        import joblib
        import os

        if not os.path.exists('memecoin_model.pkl'):
            print("‚ùå –§–∞–π–ª –º–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return False

        model = joblib.load('memecoin_model.pkl')
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

        # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç
        import numpy as np
        import pandas as pd

        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        test_data = pd.DataFrame({
            'Unnamed__0': [1.0],
            'is_valid': [1.0],
            'decimals': [6.0],
            'bundle_size': [1.0],
            'tx_idx_count': [100.0],
            'signing_wallet_nunique': [50.0],
            'quote_coin_amount_sum': [1000.0],
            'quote_coin_amount_mean': [20.0],
            'base_coin_amount_sum': [50000.0],
            'base_coin_amount_mean': [1000.0],
            'buy_count': [70.0],
            'sell_count': [30.0],
            'buy_sell_ratio': [2.33]
        })

        # –ü—Ä–æ–≥–Ω–æ–∑
        try:
            prediction = model.predict_proba(test_data)
            print(f"üéØ –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {prediction[0][1]:.4f}")
            print("‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–∞—Ü—é—î!")
            return True
        except Exception as pred_error:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É: {str(pred_error)}")
            print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ñ—ñ—á–µ–π...")
            return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {str(e)}")
        return False


if __name__ == "__main__":
    print("üöÄ –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏")
    print("=" * 40)

    # –¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—ñ–≤
    imports_ok = test_imports()

    if imports_ok:
        # –¢–µ—Å—Ç –º–æ–¥–µ–ª—ñ
        model_ok = test_model_loading()

        if model_ok:
            print("\nüéâ –í—Å–µ –ø—Ä–∞—Ü—é—î! –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ Streamlit")
        else:
            print("\nüîß –ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–æ–¥–µ–ª–ª—é")
    else:
        print("\nüîß –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏")