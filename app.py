import streamlit as st
import pandas as pd
import numpy as np
import joblib
import lightgbm as lgb
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

st.set_page_config(
    page_title="Memecoin Graduation Predictor",
    page_icon="üöÄ",
    layout="wide"
)

st.title("üöÄ Memecoin Graduation Predictor")
st.markdown("–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ graduation –º–µ–º–∫–æ—ó–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö")


# –ö–µ—à—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
@st.cache_resource
def load_model():
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à—É –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—É –º–æ–¥–µ–ª—å
        model = joblib.load('memecoin_model.pkl')
        return model
    except FileNotFoundError:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂—ñ—Ç—å –º–æ–¥–µ–ª—å —è–∫ 'memcoin_model.pkl'")
        return None
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {str(e)}")
        return None


def preprocess_input(data):
    """–ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    # –û—á–∏—â–µ–Ω–Ω—è –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
    data.columns = data.columns.str.replace('[^A-Za-z0-9_]', '_', regex=True)
    data.columns = data.columns.str.replace('__+', '_', regex=True)
    data.columns = data.columns.str.strip('_')

    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—Å–∫—ñ–≤
    data = data.fillna(0)

    return data


# Sidebar –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
st.sidebar.header("üìä –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —Ç–æ–∫–µ–Ω—É")

# –û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
tx_count = st.sidebar.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π", min_value=0, value=100)
unique_wallets = st.sidebar.number_input("–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –≥–∞–º–∞–Ω—Ü—ñ", min_value=0, value=50)
quote_coin_sum = st.sidebar.number_input("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ quote coin", min_value=0.0, value=1000.0)
quote_coin_mean = st.sidebar.number_input("–°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞ quote coin", min_value=0.0, value=20.0)
base_coin_sum = st.sidebar.number_input("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ base coin", min_value=0.0, value=50000.0)
base_coin_mean = st.sidebar.number_input("–°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞ base coin", min_value=0.0, value=1000.0)
buy_count = st.sidebar.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫", min_value=0, value=70)
sell_count = st.sidebar.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ–≤", min_value=0, value=30)
decimals = st.sidebar.number_input("Decimals", min_value=0, value=6)
bundle_size = st.sidebar.number_input("Bundle size", min_value=0.0, value=1.0)

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
buy_sell_ratio = buy_count / (sell_count + 1e-6) if sell_count > 0 else buy_count

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –∑ –≤–≤–µ–¥–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
input_data = pd.DataFrame({
    'tx_idx_count': [tx_count],
    'signing_wallet_nunique': [unique_wallets],
    'quote_coin_amount_sum': [quote_coin_sum],
    'quote_coin_amount_mean': [quote_coin_mean],
    'base_coin_amount_sum': [base_coin_sum],
    'base_coin_amount_mean': [base_coin_mean],
    'buy_count': [buy_count],
    'sell_count': [sell_count],
    'buy_sell_ratio': [buy_sell_ratio],
    'decimals': [decimals],
    'bundle_size': [bundle_size]
})

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
model, metadata = load_model()

# –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–¥–µ–ª—å
if model is not None and metadata is not None:
    st.sidebar.success("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    with st.sidebar.expander("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å"):
        st.write(f"**–¢–∏–ø –º–æ–¥–µ–ª—ñ:** {metadata['model_type']}")
        st.write(f"**–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ—á–µ–π:** {metadata['n_features']}")
        st.write(f"**CV LogLoss:** {metadata['cv_score']:.4f}")
        st.write(f"**–§—ñ—á—ñ:** {', '.join(metadata['feature_names'][:5])}...")

col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìà –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–∫–µ–Ω—É")
    st.dataframe(input_data.round(4))

with col2:
    if model is not None and st.button("üîÆ –ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
        try:
            # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
            processed_data = preprocess_input(input_data.copy())

            # –ü—Ä–æ–≥–Ω–æ–∑
            probability = model.predict_proba(processed_data)[0][1]

            st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É")

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
            if probability > 0.7:
                st.success(f"–í–∏—Å–æ–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å graduation: {probability:.1%}")
                st.balloons()
            elif probability > 0.4:
                st.warning(f"–°–µ—Ä–µ–¥–Ω—è –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å graduation: {probability:.1%}")
            else:
                st.error(f"–ù–∏–∑—å–∫–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å graduation: {probability:.1%}")

            # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
            st.progress(probability)

            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            st.info(f"""
            **–Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è:**
            - –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å > 70%: –¢–æ–∫–µ–Ω –º–∞—î –≤–∏—Å–æ–∫—ñ —à–∞–Ω—Å–∏ –Ω–∞ graduation
            - –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å 40-70%: –ü–æ–º—ñ—Ä–Ω—ñ —à–∞–Ω—Å–∏, –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
            - –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å < 40%: –ù–∏–∑—å–∫—ñ —à–∞–Ω—Å–∏ –Ω–∞ graduation
            """)

        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ: {str(e)}")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É
st.subheader("üìÅ –ü–∞–∫–µ—Ç–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∑ CSV")
uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ —Ç–æ–∫–µ–Ω—ñ–≤", type="csv")

if uploaded_file is not None and model is not None:
    try:
        df = pd.read_csv(uploaded_file)
        st.write("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ:")
        st.dataframe(df.head())

        if st.button("–ó—Ä–æ–±–∏—Ç–∏ –ø–∞–∫–µ—Ç–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑"):
            processed_df = preprocess_input(df.copy())
            predictions = model.predict_proba(processed_df)[:, 1]

            df['graduation_probability'] = predictions
            df['prediction'] = (predictions > 0.5).astype(int)

            st.success("–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            st.dataframe(df[['graduation_probability', 'prediction']])

            # –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            csv = df.to_csv(index=False)
            st.download_button(
                label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ CSV",
                data=csv,
                file_name=f"predictions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )

    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {str(e)}")

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
with st.expander("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é"):
    st.markdown("""
    ### –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:

    1. **–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑**: –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–æ–∫–µ–Ω—É –≤ sidebar —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑"

    2. **–ü–∞–∫–µ—Ç–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑**: –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV —Ñ–∞–π–ª –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏:
       - tx_idx_count
       - signing_wallet_nunique  
       - quote_coin_amount_sum
       - quote_coin_amount_mean
       - base_coin_amount_sum
       - base_coin_amount_mean
       - buy_count
       - sell_count
       - decimals
       - bundle_size

    3. **–Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤**:
       - –ó–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 1 (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å graduation)
       - –ß–∏–º –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–∏–º –±—ñ–ª—å—à–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —É—Å–ø—ñ—Ö—É
    """)

st.markdown("---")
st.markdown("–°—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –º–µ–º–∫–æ—ó–Ω—ñ–≤ üöÄ")